{"version":3,"file":"component---src-pages-spotlight-index-js-a12f3162d29b9006f1a4.js","mappings":"qOAQA,MAoEaA,EAAOA,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,sDAErC,UAtEsBC,IACpBH,EAAAA,cAACI,EAAAA,EAAM,KACLJ,EAAAA,cAAA,OAAKK,UAAU,kBACbL,EAAAA,cAAA,OAAKK,UAAU,oBACbL,EAAAA,cAAA,OAAKK,UAAU,kBACbL,EAAAA,cAAA,QAAMK,UAAU,mBAAkB,aAClCL,EAAAA,cAAA,QAAMK,UAAU,mBAAkB,aAEpCL,EAAAA,cAAA,MAAIK,UAAU,mBAAkB,iCAChCL,EAAAA,cAAA,OAAKK,UAAU,qBACbL,EAAAA,cAAA,KAAGK,UAAU,yBAAwB,2CAIzCL,EAAAA,cAAA,OAAKK,UAAU,mBACbL,EAAAA,cAACM,EAAAA,EAAW,CACVC,IAAI,0BACJC,MAAO,IACPC,QAAS,GACTC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,gCACJN,UAAU,gBAAeO,YAAAC,EAAA,SAI7Bb,EAAAA,cAAA,OAAKK,UAAU,qBACbL,EAAAA,cAAA,KAAGK,UAAU,qBAAoB,8MAIjCL,EAAAA,cAAA,OAAKK,UAAU,kBACbL,EAAAA,cAAA,SAAG,kSAIHA,EAAAA,cAAA,SAAG,yVAIHA,EAAAA,cAAA,SAAG,0QAIHA,EAAAA,cAAA,SAAG,uMAIHA,EAAAA,cAAA,SAAG,uRAIHA,EAAAA,cAAA,SAAG,+PAIHA,EAAAA,cAAA,SAAG,qMAKLA,EAAAA,cAAA,OAAKK,UAAU,oBACbL,EAAAA,cAACc,EAAAA,KAAI,CAACC,GAAG,YAAYV,UAAU,UAAS,oC,4vCCzBlD,IAlCA,SAAYW,GAAoC,IAADC,EAAAC,EAAA,IAAlC,YAAEC,EAAW,MAAEjB,EAAK,SAAEkB,GAAUJ,EAC3C,MAAM,KAAEK,IAASC,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApBR,EAAGI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBf,MAExC,OACEF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQyB,EAAe,GAAGvB,OAAWuB,IAAiBvB,GACtDF,EAAAA,cAAA,QAAM0B,KAAK,cAAcC,QAASJ,IAClCvB,EAAAA,cAAA,QAAM4B,SAAS,WAAWD,QAASzB,IACnCF,EAAAA,cAAA,QAAM4B,SAAS,iBAAiBD,QAASJ,IACzCvB,EAAAA,cAAA,QAAM4B,SAAS,UAAUD,QAAQ,YACjC3B,EAAAA,cAAA,QAAM0B,KAAK,eAAeC,QAAQ,YAClC3B,EAAAA,cAAA,QAAM0B,KAAK,kBAAkBC,SAA0B,QAAjBT,EAAAG,EAAKG,oBAAY,IAAAN,OAAA,EAAjBA,EAAmBW,SAAU,KACnE7B,EAAAA,cAAA,QAAM0B,KAAK,gBAAgBC,QAASzB,IACpCF,EAAAA,cAAA,QAAM0B,KAAK,sBAAsBC,QAASJ,IACzCH,EAGP,C","sources":["webpack://gatsby-starter-default/./src/pages/spotlight/index.js","webpack://gatsby-starter-default/./src/components/seo.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nimport Layout from \"../../components/layout\"\nimport Seo from \"../../components/seo\"\nimport \"../spotlight.css\"\n\nconst SpotlightPage = () => (\n  <Layout>\n    <div className=\"spotlight-page\">\n      <div className=\"spotlight-header\">\n        <div className=\"spotlight-meta\">\n          <span className=\"spotlight-label\">Spotlight</span>\n          <span className=\"spotlight-issue\">Issue 17</span>\n        </div>\n        <h1 className=\"spotlight-title\">Animals as chemical factories</h1>\n        <div className=\"spotlight-authors\">\n          <p className=\"spotlight-author-info\">Words by Niko McCarty & Xander Balwit</p>\n        </div>\n      </div>\n\n      <div className=\"spotlight-image\">\n        <StaticImage\n          src=\"../../images/avatar.jpg\"\n          width={1000}\n          quality={95}\n          formats={[\"auto\", \"webp\", \"avif\"]}\n          alt=\"Animals as chemical factories\"\n          className=\"spotlight-img\"\n        />\n      </div>\n\n      <div className=\"spotlight-content\">\n        <p className=\"spotlight-excerpt\">\n          Horses bled for antivenom, crabs drained for endotoxin tests, and silkworms boiled for silk. Science can now replace these practices with synthetic alternatives — but we need to find ways to scale them.\n        </p>\n\n        <div className=\"spotlight-body\">\n          <p>\n            For centuries, humans have used animals as living chemical factories. We've extracted valuable compounds from their bodies, often at great cost to the animals themselves. Today, advances in biotechnology are making it possible to produce many of these compounds without harming animals.\n          </p>\n          \n          <p>\n            Consider horseshoe crabs. Their blue blood contains a compound called Limulus Amebocyte Lysate (LAL), which is used to test medical devices and injectable drugs for bacterial contamination. To collect this blood, hundreds of thousands of horseshoe crabs are captured annually, bled, and returned to the ocean. Many don't survive the process.\n          </p>\n          \n          <p>\n            Or take snake antivenom production. It typically involves injecting horses or sheep with small amounts of venom, then harvesting antibodies from their blood. The process is painful for the animals and yields antivenom that can cause allergic reactions in humans.\n          </p>\n          \n          <p>\n            Silk production has traditionally required boiling silkworms alive inside their cocoons to extract the silk fibers intact. Billions of silkworms are killed each year for the global silk industry.\n          </p>\n          \n          <p>\n            But synthetic alternatives are emerging. Recombinant technology can now produce LAL without horseshoe crabs. Companies are developing synthetic antivenoms using phage display and other techniques. And biotech firms are engineering yeast and bacteria to produce silk proteins.\n          </p>\n          \n          <p>\n            The challenge now is scaling these technologies to make them cost-competitive with animal-derived products. This requires investment in research and development, as well as regulatory frameworks that encourage the adoption of animal-free alternatives.\n          </p>\n          \n          <p>\n            By moving away from using animals as chemical factories, we can create a more sustainable and humane bioeconomy — one that delivers the compounds we need without causing unnecessary suffering.\n          </p>\n        </div>\n\n        <div className=\"spotlight-footer\">\n          <Link to=\"/issue-17\" className=\"button\">Read full article in Issue 17</Link>\n        </div>\n      </div>\n    </div>\n  </Layout>\n)\n\nexport const Head = () => <Seo title=\"Animals as chemical factories | Works in Progress\" />\n\nexport default SpotlightPage ","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","SpotlightPage","Layout","className","StaticImage","src","width","quality","formats","alt","__imageData","require","Link","to","_ref","_site$siteMetadata","_site$siteMetadata2","description","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","author"],"sourceRoot":""}